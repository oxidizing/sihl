module Config = Sihl__config.Config

let dune ?(typ = "library") ?(ppx = []) name libs =
  let libs = String.concat " " libs in
  let ppx =
    if List.length ppx > 0
    then ppx |> String.concat " " |> Format.sprintf "\n (preprocess (pps %s))"
    else ""
  in
  Format.sprintf "(%s\n (name %s)\n (libraries %s)%s)" typ name libs ppx
;;

let dune_test db =
  let caqti_driver =
    match db with
    | Config.Postgresql -> "caqti-driver-postgresql"
    | Config.Mariadb -> "caqti-driver-mariadb"
  in
  Format.sprintf
    {|(library
 (name test)
 (libraries sihl lib %s)
 (inline_tests)
 (preprocess (pps ppx_inline_test ppx_assert lwt_ppx tyxml-jsx)))|}
    caqti_driver
;;

let dune_model =
  {|(library
 (name model)
 (libraries sihl)
 (preprocess
  (pps
   lwt_ppx
   ppx_fields_conv
   ppx_enumerate
   ppx_deriving.make
   ppx_deriving_yojson)))|}
;;

let bin = {|let () = Lib.run ()|}

(* Add a nice template with styling for a "You are all set" page *)
let lib =
  {|module C = Sihl.Config

let routes = [ Dream.get "/" (fun _ -> Dream.html "Hello World!") ]

let routes =
  if C.debug () then routes @ [ Dream_livereload.route () ] else routes
;;

let run () =
  Dream.run ~port:(C.port ()) ~interface:(C.host ())
  @@ Dream.logger
  @@ Sihl.if_debug (Dream_livereload.inject_script ())
  @@ Dream.router routes
;;|}
;;

let form =
  "(* Place your form here to process user input. Consult Sihl.Form for more \
   info. *)"
;;

let model =
  "(* Place your models here to describe business models. Consult Sihl.Model \
   for more info. *)"
;;

let template =
  "/* Place your templates here to render HTML and JSON. Consult the TyXML and \
   Yojson documentations for more info. */"
;;

let view =
  "(* Place your views here to act on user input through HTTP requests. \
   Consult Sihl.View for more info. *)"
;;

(* TODO 1. Generate .env and .env.test 2. .env.test is based on .env 3. Make
   sure on production it's a mix of .env and ENV vars 4. Use model_schema for
   sihl config to display all configurations that are supported and needed. *)
let env_base db =
  let database_url =
    match db with
    | Config.Postgresql -> "postgresql://admin:password@127.0.0.1:5432/dev"
    | Config.Mariadb -> "mariadb://admin:password@127.0.0.1:3306/dev"
  in
  let random_secret =
    Dream.random 64 |> Base64.encode_string ~alphabet:Base64.uri_safe_alphabet
  in
  Format.sprintf
    {|DATABASE_URL=%s
SIHL_DEBUG=false
SIHL_SECRET=local_%s
LOGIN_URL=/login
|}
    database_url
    random_secret
;;

let env_local = {|SIHL_DEBUG=true|}
let env_test = {|SIHL_DEBUG=true|}

let env_production = {|SIHL_DEBUG=false
DATABASE_URL=
SIHL_SECRET=|}

let test =
  {|let%test_unit "1 + 1 = 2" =
  let open Sihl.Test.Assert in
  [%test_result: int] (1 + 1) ~expect:2
;;|}
;;

let ocamlformat =
  "profile = janestreet\n\
   parse-docstrings = true\n\
   wrap-comments = true\n\
   margin = 80"
;;

let dune_project db =
  let caqti_driver =
    match db with
    | Config.Postgresql -> "caqti-driver-postgresql"
    | Config.Mariadb -> "caqti-driver-mariadb"
  in
  Format.sprintf
    {|(lang dune 2.8)
(generate_opam_files true)
(package
 (name app)
 (synopsis "A synposis")
 (description
  "Description of this awesome package")
 (depends
  (sihl (>= 4.0.0))
  (tyxml-jsx (>= 4.5.0))
  (dream-livereload (>= 0.2.0))
  (ppx_inline_test (>= v0.15.0))
  (%s (>= 1.8.0))))|}
    caqti_driver
;;

let gitignore = {|/_build/
/_opam/
.merlin
.devcontainer/data|}

let opam db =
  let caqti_driver =
    match db with
    | Config.Postgresql -> "caqti-driver-postgresql"
    | Config.Mariadb -> "caqti-driver-mariadb"
  in
  Format.sprintf
    {|# This file is generated by dune, edit dune-project instead
opam-version: "2.0"
synopsis: "A synposis"
description: "Description of this awesome package"
depends: [
  "dune" {>= "2.8"}
  "sihl" {>= "4.0.0"}
  "tyxml-jsx" {>= "4.5.0"}
  "dream-livereload" {>= "0.2.0"}
  "%s" {>= "1.8.0"}
  "ppx_inline_test" {>= "v0.15.0"}
  "odoc" {with-doc}
]
build: [
  ["dune" "subst"] {dev}
  [
    "dune"
    "build"
    "-p"
    name
    "-j"
    jobs
    "@install"
    "@runtest" {with-test}
    "@doc" {with-doc}
  ]
]|}
    caqti_driver
;;

let default_nix db =
  match db with
  | Config.Postgresql ->
    {|with import <nixpkgs> { };

mkShell {
  buildInputs = [ openssl pkgconfig libev postgresql ];
  shellHook = "eval $(opam env)";
}|}
  | Config.Mariadb ->
    {|with import <nixpkgs> { };

mkShell {
  buildInputs = [ pkgconfig openssl libev mariadb-client mariadb-connector-c ];
  LD_LIBRARY_PATH = "${mariadb-connector-c}/lib/mariadb";
  shellHook = "eval $(opam env)";
}|}
;;
